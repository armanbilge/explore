"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReport = void 0;
const bundlemon_utils_1 = require("bundlemon-utils");
const logger_1 = __importDefault(require("../../common/logger"));
const service_1 = require("../../common/service");
function generateReport(config, input) {
    return __awaiter(this, void 0, void 0, function* () {
        logger_1.default.info('Start generating report');
        const subProject = config.subProject;
        let record;
        let baseRecord;
        let linkToReport;
        if (!config.remote) {
            logger_1.default.warn('remote flag is OFF, showing only local results');
        }
        else {
            const { gitVars } = config;
            logger_1.default.info(`Create commit record for branch "${gitVars.branch}"`);
            const result = yield (0, service_1.createCommitRecord)(config.projectId, Object.assign(Object.assign({ subProject }, gitVars), input), config.getCreateCommitRecordAuthParams());
            if (!result) {
                logger_1.default.error('Failed to create commit record');
                return undefined;
            }
            ({ record, baseRecord, linkToReport } = result);
            logger_1.default.info(`Commit record "${result.record.id}" has been successfully created`);
        }
        const diffReport = (0, bundlemon_utils_1.generateDiffReport)(input, baseRecord ? { files: baseRecord.files, groups: baseRecord.groups } : undefined);
        const report = Object.assign(Object.assign({}, diffReport), { metadata: { subProject, linkToReport, record, baseRecord } });
        logger_1.default.info('Finished generating report');
        // If the record and the base record have the same branch, that probably mean it's a merge commit, so no need to fail the report
        if (report.status === bundlemon_utils_1.Status.Fail && (record === null || record === void 0 ? void 0 : record.branch) && (record === null || record === void 0 ? void 0 : record.branch) === (baseRecord === null || baseRecord === void 0 ? void 0 : baseRecord.branch)) {
            report.status = bundlemon_utils_1.Status.Pass;
            logger_1.default.info('Merge commit detected, change report status to "Pass"');
        }
        return report;
    });
}
exports.generateReport = generateReport;
