"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupFilesByPattern = exports.getFilesDetails = void 0;
const getFileSize_1 = require("./getFileSize");
const pathUtils_1 = require("./pathUtils");
function getFilesDetails({ baseDir, config, allFiles, stopOnMatch, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const filesConfigMap = config.reduce((acc, curr) => {
            return Object.assign(Object.assign({}, acc), { [curr.path]: curr });
        }, {});
        const matchFiles = yield (0, pathUtils_1.getMatchFiles)(baseDir, allFiles, Object.keys(filesConfigMap), stopOnMatch);
        const files = [];
        yield Promise.all(Object.entries(matchFiles).map(([pattern, matchFiles]) => __awaiter(this, void 0, void 0, function* () {
            const _a = filesConfigMap[pattern], { path } = _a, restFileConfig = __rest(_a, ["path"]);
            for (const { fullPath, prettyPath } of matchFiles) {
                const size = yield (0, getFileSize_1.getFileSize)(fullPath, restFileConfig.compression);
                files.push(Object.assign(Object.assign({}, restFileConfig), { pattern, path: prettyPath, size }));
            }
        })));
        return files;
    });
}
exports.getFilesDetails = getFilesDetails;
function groupFilesByPattern(files) {
    const groupsMap = {};
    for (const file of files) {
        const { pattern, size } = file;
        if (!groupsMap[pattern]) {
            groupsMap[pattern] = Object.assign(Object.assign({}, file), { path: pattern, pattern, size: 0 });
        }
        groupsMap[pattern].size += size;
    }
    return Object.values(groupsMap);
}
exports.groupFilesByPattern = groupFilesByPattern;
