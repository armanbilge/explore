"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bundlemon_utils_1 = require("bundlemon-utils");
const logger_1 = __importDefault(require("../common/logger"));
const analyzer_1 = require("./analyzer");
const outputs_1 = require("./outputs");
const report_1 = require("./report");
const initializer_1 = require("./initializer");
exports.default = (config) => __awaiter(void 0, void 0, void 0, function* () {
    const normalizedConfig = yield (0, initializer_1.initializer)(config);
    if (!normalizedConfig) {
        throw new Error('Failed to initialize');
    }
    const { files, groups } = yield (0, analyzer_1.analyzeLocalFiles)(normalizedConfig);
    if (files.length === 0 && groups.length === 0) {
        throw new Error('No files or groups found');
    }
    const report = yield (0, report_1.generateReport)(normalizedConfig, { files, groups });
    if (!report) {
        throw new Error('Failed to generate report');
    }
    yield (0, outputs_1.generateOutputs)(report);
    logger_1.default.info(`Done - ${report.status === bundlemon_utils_1.Status.Pass ? 'Success' : 'Failure'} - ${(0, bundlemon_utils_1.getReportConclusionText)(report)}`);
    return report;
});
