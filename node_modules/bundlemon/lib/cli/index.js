"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const bundlemon_utils_1 = require("bundlemon-utils");
const main_1 = __importDefault(require("../main"));
const logger_1 = __importDefault(require("../common/logger"));
const consts_1 = require("../common/consts");
const configFile_1 = require("./configFile");
commander_1.program
    .version(consts_1.version)
    .addOption(new commander_1.Option('-c, --config <path>', 'config file path'))
    .addOption(new commander_1.Option('--subProject <name>', 'sub project name'))
    .addOption(new commander_1.Option('--defaultCompression <compression>', 'default compression').choices(Object.values(bundlemon_utils_1.Compression)));
exports.default = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        commander_1.program.parse(process.argv);
        const options = commander_1.program.opts();
        const config = yield (0, configFile_1.loadConfigFile)(options.config);
        if (!config) {
            logger_1.default.error('Cant find config or the config file is empty');
            process.exit(1);
        }
        const report = yield (0, main_1.default)(mergeCliOptions(config, options));
        process.exit(report.status === bundlemon_utils_1.Status.Pass ? 0 : 1);
    }
    catch (err) {
        logger_1.default.error('Unhandled error', err);
        process.exit(1);
    }
});
function mergeCliOptions(config, options) {
    const newConfig = Object.assign({}, config);
    if (options.subProject) {
        newConfig.subProject = options.subProject;
    }
    if (options.defaultCompression) {
        newConfig.defaultCompression = options.defaultCompression;
    }
    return newConfig;
}
