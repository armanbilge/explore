"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzeLocalFiles = void 0;
const pathUtils_1 = require("./pathUtils");
const fileDetailsUtils_1 = require("./fileDetailsUtils");
const logger_1 = __importDefault(require("../../common/logger"));
function analyzeLocalFiles(config) {
    return __awaiter(this, void 0, void 0, function* () {
        logger_1.default.info(`Start analyzing`);
        const { baseDir, files: filesConfig, groups: groupsConfig } = config;
        const allFiles = yield (0, pathUtils_1.getAllPaths)(config.baseDir);
        const [files, groupFiles] = yield Promise.all([
            (0, fileDetailsUtils_1.getFilesDetails)({ baseDir, allFiles, config: filesConfig, stopOnMatch: true }),
            (0, fileDetailsUtils_1.getFilesDetails)({ baseDir, allFiles, config: groupsConfig, stopOnMatch: false }),
        ]);
        const groups = (0, fileDetailsUtils_1.groupFilesByPattern)(groupFiles);
        logger_1.default.info(`Finished analyzing`);
        return { files, groups };
    });
}
exports.analyzeLocalFiles = analyzeLocalFiles;
