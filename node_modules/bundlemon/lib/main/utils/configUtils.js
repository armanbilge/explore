"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectId = exports.getCreateCommitRecordAuthParams = exports.validateConfig = void 0;
const path = __importStar(require("path"));
const yup = __importStar(require("yup"));
const bytes_1 = __importDefault(require("bytes"));
const ci_1 = require("../utils/ci");
const logger_1 = __importDefault(require("../../common/logger"));
const bundlemon_utils_1 = require("bundlemon-utils");
const validationUtils_1 = require("./validationUtils");
const consts_1 = require("../../common/consts");
const utils_1 = require("./utils");
const service_1 = require("../../common/service");
function normalizedFileConfig(file, defaultCompression) {
    const { maxSize } = file, rest = __rest(file, ["maxSize"]);
    return Object.assign({ maxSize: maxSize ? (0, bytes_1.default)(maxSize) : undefined, compression: defaultCompression }, rest);
}
function getConfigSchema() {
    const fileSchema = yup
        .object()
        .required()
        .shape({
        friendlyName: yup.string().optional().min(1).max(50),
        path: yup.string().required(),
        compression: yup.mixed().optional().oneOf(Object.values(bundlemon_utils_1.Compression)),
        maxSize: yup
            .string()
            .optional()
            .test('maxSize', (params) => `${params.path} not a valid max size`, (value) => {
            if (value === undefined || value === null) {
                return true;
            }
            const sizeInBytes = (0, bytes_1.default)(value);
            return !isNaN(sizeInBytes);
        }),
        maxPercentIncrease: yup.number().optional().positive(),
    });
    const configSchema = yup
        .object()
        .required()
        .shape({
        subProject: yup
            .string()
            .optional()
            .min(1, "subProject cant be an empty string, set undefined or dont set it if you don't need it")
            .max(100)
            .matches(/^[A-Za-z0-9_\-. ]*$/),
        baseDir: yup.string().optional(),
        verbose: yup.boolean().optional(),
        defaultCompression: yup.mixed().optional().oneOf(Object.values(bundlemon_utils_1.Compression)),
        reportOutput: yup.array().of(
        // @ts-expect-error
        yup.lazy((val) => (typeof val === 'string' ? yup.string().required() : yup.array().required().min(2).max(2)))),
        files: yup.array().optional().of(fileSchema),
        groups: yup.array().optional().of(fileSchema),
        includeCommitMessage: yup.boolean().optional().default(false),
    });
    return configSchema;
}
function validateConfig(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const validatedConfig = (0, validationUtils_1.validateYup)(getConfigSchema(), config, 'bundlemon');
        if (!validatedConfig) {
            return undefined;
        }
        const _a = validatedConfig, { subProject, baseDir = process.cwd(), files = [], groups = [], defaultCompression: defaultCompressionOption } = _a, restConfig = __rest(_a, ["subProject", "baseDir", "files", "groups", "defaultCompression"]);
        const defaultCompression = defaultCompressionOption || bundlemon_utils_1.Compression.Gzip;
        const ciVars = (0, ci_1.getCIVars)();
        const isRemote = ciVars.ci && process.env[consts_1.EnvVar.remoteFlag] !== 'false';
        const baseNormalizedConfig = Object.assign({ subProject, baseDir: path.resolve(baseDir), verbose: false, defaultCompression, reportOutput: [], files: files.map((f) => normalizedFileConfig(f, defaultCompression)), groups: groups.map((f) => normalizedFileConfig(f, defaultCompression)), includeCommitMessage: false }, restConfig);
        if (process.env[consts_1.EnvVar.subProject]) {
            logger_1.default.debug('overwrite sub project from env var');
            baseNormalizedConfig.subProject = process.env[consts_1.EnvVar.subProject];
        }
        if (!isRemote) {
            return Object.assign(Object.assign({}, baseNormalizedConfig), { remote: false });
        }
        // Remote is enabled, validate remote config
        const projectId = yield getProjectId(ciVars);
        if (!projectId) {
            return undefined;
        }
        const createCommitRecordAuthParams = getCreateCommitRecordAuthParams(ciVars);
        if (!createCommitRecordAuthParams) {
            return undefined;
        }
        logger_1.default.debug(`Project ID: ${projectId}`);
        const { branch, commitSha, targetBranch, prNumber, commitMsg } = ciVars;
        if (!branch) {
            logger_1.default.error('Missing "CI_BRANCH" env var');
            return undefined;
        }
        if (!commitSha) {
            logger_1.default.error('Missing "CI_COMMIT_SHA" env var');
            return undefined;
        }
        return Object.assign(Object.assign({}, baseNormalizedConfig), { projectId, remote: true, gitVars: {
                branch,
                commitSha,
                baseBranch: targetBranch,
                prNumber,
                commitMsg: baseNormalizedConfig.includeCommitMessage ? commitMsg : undefined,
            }, getCreateCommitRecordAuthParams: () => createCommitRecordAuthParams });
    });
}
exports.validateConfig = validateConfig;
function getCreateCommitRecordAuthParams(ciVars) {
    const apiKey = (0, utils_1.getEnvVar)(consts_1.EnvVar.projectApiKey);
    if (apiKey) {
        return {
            authType: consts_1.CreateCommitRecordAuthType.ProjectApiKey,
            token: apiKey,
        };
    }
    if (ciVars.provider === 'github') {
        const { owner, repo, buildId } = ciVars;
        if (owner && repo && buildId) {
            return {
                authType: consts_1.CreateCommitRecordAuthType.GithubActions,
                runId: buildId,
            };
        }
    }
    // TODO: add explanation about other options
    logger_1.default.error(`Missing "${consts_1.EnvVar.projectApiKey}" env var`);
    return undefined;
}
exports.getCreateCommitRecordAuthParams = getCreateCommitRecordAuthParams;
function getProjectId(ciVars) {
    return __awaiter(this, void 0, void 0, function* () {
        let projectId = (0, utils_1.getEnvVar)(consts_1.EnvVar.projectId);
        if (!projectId) {
            const { provider, owner, repo, buildId, commitSha } = ciVars;
            if (provider === bundlemon_utils_1.ProjectProvider.GitHub && owner && repo && buildId && commitSha) {
                logger_1.default.info('fetch project id');
                projectId = yield (0, service_1.getOrCreateProjectId)({ provider: bundlemon_utils_1.ProjectProvider.GitHub, owner, repo }, { runId: buildId, commitSha });
                if (!projectId) {
                    logger_1.default.error(`Project id returned undefined`);
                }
            }
            else {
                logger_1.default.error(`Missing "${consts_1.EnvVar.projectId}" env var`);
            }
        }
        return projectId;
    });
}
exports.getProjectId = getProjectId;
