"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadConfigFile = void 0;
const cosmiconfig_1 = require("cosmiconfig");
const logger_1 = __importDefault(require("../common/logger"));
const explorer = (0, cosmiconfig_1.cosmiconfig)('bundlemon');
function loadConfigFile(configPath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (configPath) {
            logger_1.default.debug(`Load config file from "${configPath}"`);
        }
        try {
            const cosmiconfigResult = yield (configPath ? explorer.load(configPath) : explorer.search());
            if (!cosmiconfigResult || cosmiconfigResult.isEmpty) {
                return undefined;
            }
            logger_1.default.debug(`Config file loaded from "${cosmiconfigResult.filepath}"`);
            return cosmiconfigResult.config;
        }
        catch (e) {
            logger_1.default.error(`Error loading config file: ${e}`);
            return undefined;
        }
    });
}
exports.loadConfigFile = loadConfigFile;
