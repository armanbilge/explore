"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.targetBranch = exports.prNumber = exports.commitSha = exports.branch = exports.repo = exports.owner = exports.provider = exports.ci = exports.getCIVars = void 0;
const providers_1 = __importDefault(require("./providers"));
const utils_1 = require("../utils");
const overrideVars = {
    ci: (0, utils_1.getEnvVar)('CI') === 'true',
    provider: undefined,
    owner: (0, utils_1.getEnvVar)('CI_REPO_OWNER'),
    repo: (0, utils_1.getEnvVar)('CI_REPO_NAME'),
    branch: (0, utils_1.getEnvVar)('CI_BRANCH'),
    commitSha: (0, utils_1.getEnvVar)('CI_COMMIT_SHA'),
    targetBranch: (0, utils_1.getEnvVar)('CI_TARGET_BRANCH'),
    prNumber: (0, utils_1.getEnvVar)('CI_PR_NUMBER'),
    commitMsg: (0, utils_1.getEnvVar)('CI_COMMIT_MESSAGE'),
};
const providerVars = (_a = providers_1.default.find((p) => p.isItMe)) === null || _a === void 0 ? void 0 : _a.getVars();
const vars = Object.assign({}, overrideVars);
if (providerVars) {
    // Use provider var if override var is undefined
    Object.keys(providerVars).forEach((varName) => {
        var _a;
        // @ts-ignore
        vars[varName] = (_a = vars[varName]) !== null && _a !== void 0 ? _a : providerVars[varName];
    });
}
const getCIVars = () => {
    return vars;
};
exports.getCIVars = getCIVars;
exports.default = vars;
const { ci, provider, owner, repo, branch, commitSha, prNumber, targetBranch } = vars;
exports.ci = ci;
exports.provider = provider;
exports.owner = owner;
exports.repo = repo;
exports.branch = branch;
exports.commitSha = commitSha;
exports.prNumber = prNumber;
exports.targetBranch = targetBranch;
