"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateOutputs = exports.initOutputs = exports.OutputManager = void 0;
const logger_1 = __importDefault(require("../../common/logger"));
const outputs_1 = require("./outputs");
const console_1 = __importDefault(require("./outputs/console"));
const utils_1 = require("./utils");
class OutputManager {
    constructor() {
        this.outputs = [];
        this.outputCreator = (0, outputs_1.getAllOutputs)().reduce((prev, curr) => {
            return Object.assign(Object.assign({}, prev), { [curr.name]: curr.create });
        }, {});
        this.initOutputs = (config) => __awaiter(this, void 0, void 0, function* () {
            logger_1.default.debug('Init outputs');
            const consoleOutputInstance = yield console_1.default.create({ config, options: undefined });
            if (!consoleOutputInstance) {
                throw new Error('Failed to create console output instance');
            }
            this.outputs.push({ name: console_1.default.name, instance: consoleOutputInstance });
            if (config.reportOutput.length > 0) {
                for (const output of config.reportOutput) {
                    const { name, options = {} } = (0, utils_1.parseOutput)(output);
                    if (!this.outputCreator[name]) {
                        throw new Error(`Cant find output "${name}"`);
                    }
                    try {
                        const instance = yield this.outputCreator[name]({ config, options });
                        if (instance) {
                            this.outputs.push({ name, instance });
                        }
                        else {
                            logger_1.default.debug(`Ignoring output "${name}"`);
                        }
                    }
                    catch (err) {
                        throw new Error(`Error while creating "${name}" output: ${err.message}`);
                    }
                }
            }
        });
        this.generateOutputs = (report) => __awaiter(this, void 0, void 0, function* () {
            var _a, e_1, _b, _c;
            logger_1.default.debug('generate outputs');
            try {
                for (var _d = true, _e = __asyncValues(this.getOutputs()), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const output = _c;
                    const { name, instance } = output;
                    logger_1.default.info(`Generate ${name} output`);
                    try {
                        yield instance.generate(report);
                    }
                    catch (err) {
                        throw new Error(`Error while generating "${name}" output. ${err.message}`);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        this.getOutputs = () => this.outputs;
    }
}
exports.OutputManager = OutputManager;
_a = new OutputManager(), exports.initOutputs = _a.initOutputs, exports.generateOutputs = _a.generateOutputs;
