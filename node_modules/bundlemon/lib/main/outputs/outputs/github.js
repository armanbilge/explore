"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldPostOutput = exports.validateOptions = exports.GithubOutputPostOption = void 0;
const yup = __importStar(require("yup"));
const bundlemon_utils_1 = require("bundlemon-utils");
const ci_1 = require("../../utils/ci");
const logger_1 = require("../../../common/logger");
const validationUtils_1 = require("../../utils/validationUtils");
const service_1 = require("../../../common/service");
const utils_1 = require("../../utils/utils");
const NAME = 'github';
const logger = (0, logger_1.createLogger)(`${NAME} output`);
var GithubOutputPostOption;
(function (GithubOutputPostOption) {
    GithubOutputPostOption["Always"] = "always";
    GithubOutputPostOption["OnFailure"] = "on-failure";
    GithubOutputPostOption["PROnly"] = "pr-only";
    GithubOutputPostOption["Off"] = "off";
})(GithubOutputPostOption || (exports.GithubOutputPostOption = GithubOutputPostOption = {}));
function createGithubOutputPostOptionSchema(defaultValue) {
    return yup.lazy((value) => (typeof value === 'string'
        ? yup.mixed().optional().oneOf(Object.values(GithubOutputPostOption)).default(true)
        : yup.boolean())
        .optional()
        .default(defaultValue));
}
function validateOptions(options) {
    const schema = yup
        .object()
        .required()
        .shape({
        checkRun: createGithubOutputPostOptionSchema(false),
        commitStatus: createGithubOutputPostOptionSchema(true),
        prComment: createGithubOutputPostOptionSchema(true),
    })
        .noUnknown(true);
    return (0, validationUtils_1.validateYup)(schema, options, `${NAME} output`);
}
exports.validateOptions = validateOptions;
function logGithubError(err) {
    var _a, _b, _c;
    if (err.isAxiosError) {
        const axiosError = err;
        logger.error(`Github returned ${(_a = axiosError === null || axiosError === void 0 ? void 0 : axiosError.response) === null || _a === void 0 ? void 0 : _a.status}`);
        try {
            logger.error(JSON.stringify((_b = axiosError === null || axiosError === void 0 ? void 0 : axiosError.response) === null || _b === void 0 ? void 0 : _b.data, null, 2));
        }
        catch (_d) {
            logger.error((_c = axiosError === null || axiosError === void 0 ? void 0 : axiosError.response) === null || _c === void 0 ? void 0 : _c.data);
        }
    }
    else {
        logger.error('Unknown error', err);
    }
}
const output = {
    name: NAME,
    create: ({ options, config }) => {
        const normalizedOptions = validateOptions(options);
        if (!normalizedOptions) {
            throw new Error(`validation error in output "${NAME}" options`);
        }
        if (!config.remote) {
            logger.warn('remote flag is OFF, ignore output');
            return undefined;
        }
        if (!ci_1.owner || !ci_1.repo) {
            throw new Error('Missing "CI_REPO_OWNER" & "CI_REPO_NAME" env vars');
        }
        let authParams;
        const ciVars = (0, ci_1.getCIVars)();
        const githubToken = (0, utils_1.getEnvVar)('BUNDLEMON_GITHUB_TOKEN');
        if (githubToken) {
            authParams = { token: githubToken };
        }
        else if (ciVars.provider == 'github' && ciVars.buildId) {
            authParams = { runId: ciVars.buildId };
        }
        else {
            throw new Error('Missing GitHub actions run id or GitHub token');
        }
        return {
            generate: (report) => __awaiter(void 0, void 0, void 0, function* () {
                var _a;
                const { projectId, gitVars: { commitSha, prNumber }, } = config;
                if (!((_a = report.metadata.record) === null || _a === void 0 ? void 0 : _a.id)) {
                    throw new Error('missing commit record id');
                }
                logger.debug(`Owner: "${ci_1.owner}" Repo: "${ci_1.repo}" sha: "${commitSha}" PR: "${prNumber}"`);
                const payload = {
                    git: { owner: ci_1.owner, repo: ci_1.repo, commitSha, prNumber },
                    auth: authParams,
                    output: {
                        checkRun: shouldPostOutput(normalizedOptions.checkRun, report),
                        commitStatus: shouldPostOutput(normalizedOptions.commitStatus, report),
                        prComment: shouldPostOutput(normalizedOptions.prComment, report),
                    },
                };
                try {
                    const { data: response } = yield service_1.serviceClient.post(`projects/${projectId}/commit-records/${report.metadata.record.id}/outputs/github`, payload);
                    let didFail = false;
                    for (const [type, result] of Object.entries(response)) {
                        let logFunc = logger.info;
                        if (result.result === 'failure') {
                            logFunc = logger.error;
                            didFail = true;
                        }
                        logFunc(`Create GitHub "${type}": ${result.result} - ${result.message}`);
                    }
                    if (didFail) {
                        throw new Error('One or more GitHub outputs failed');
                    }
                }
                catch (err) {
                    logGithubError(err);
                    throw err;
                }
            }),
        };
    },
};
exports.default = output;
function shouldPostOutput(option, report) {
    var _a;
    return (option === true ||
        option === GithubOutputPostOption.Always ||
        (option === GithubOutputPostOption.OnFailure && report.status === bundlemon_utils_1.Status.Fail) ||
        (option === GithubOutputPostOption.PROnly && !!((_a = report.metadata.record) === null || _a === void 0 ? void 0 : _a.prNumber)));
}
exports.shouldPostOutput = shouldPostOutput;
