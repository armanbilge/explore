"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMatchFiles = exports.getRegexHash = exports.createPrettyPath = exports.getAllPaths = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const micromatch = __importStar(require("micromatch"));
function getAllPaths(dirPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const entries = yield fs.promises.readdir(dirPath, { withFileTypes: true });
        const files = entries.filter((file) => !file.isDirectory()).map((file) => path.join(dirPath, file.name));
        const folders = entries.filter((folder) => folder.isDirectory());
        for (const folder of folders)
            files.push(...(yield getAllPaths(path.join(dirPath, folder.name))));
        return files;
    });
}
exports.getAllPaths = getAllPaths;
function createPrettyPath(filePath, globPattern) {
    var _a;
    let prettyPath = filePath;
    const re = micromatch.makeRe(globPattern);
    const groups = ((_a = re.exec(filePath)) === null || _a === void 0 ? void 0 : _a.groups) || {};
    Object.entries(groups).forEach(([key, value]) => {
        if (key.startsWith('hash')) {
            prettyPath = prettyPath.replace(value, '(hash)');
        }
    });
    return prettyPath;
}
exports.createPrettyPath = createPrettyPath;
function getRegexHash(index) {
    return `(?<hash${index}>[a-zA-Z0-9]+)`;
}
exports.getRegexHash = getRegexHash;
function getMatchFiles(baseDir, files, patterns, stopOnMatch) {
    return __awaiter(this, void 0, void 0, function* () {
        const patternsMap = patterns.map((pattern) => {
            let index = 0;
            return { originalPattern: pattern, pattern: pattern.replace(/<hash>/g, () => getRegexHash(index++)) };
        });
        const filesGroupByPattern = {};
        for (const fullPath of files) {
            const relativePath = path.relative(baseDir, fullPath);
            for (const { originalPattern, pattern } of patternsMap) {
                if (micromatch.isMatch(relativePath, pattern)) {
                    if (!filesGroupByPattern[originalPattern]) {
                        filesGroupByPattern[originalPattern] = [];
                    }
                    const prettyPath = createPrettyPath(relativePath, pattern);
                    filesGroupByPattern[originalPattern].push({ fullPath, prettyPath });
                    if (stopOnMatch) {
                        break;
                    }
                }
            }
        }
        return filesGroupByPattern;
    });
}
exports.getMatchFiles = getMatchFiles;
